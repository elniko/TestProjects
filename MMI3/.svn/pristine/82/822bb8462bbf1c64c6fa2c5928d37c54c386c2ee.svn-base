package service;

import entity.ProcessEntity;
import exceptions.*;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.ConfigFileApplicationContextInitializer;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.boot.test.WebIntegrationTest;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;
import service.interfaces.ProcessService;
import service.interfaces.UserService;
import spring.MmiBoot;
import spring.old.SpringConfig;

import javax.annotation.PostConstruct;
import java.util.List;

/**
 * Created by Nick on 06/03/2015.
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = MmiBoot.class)
@WebIntegrationTest
//@ContextConfiguration(classes = MmiBoot.class,
  //      initializers = ConfigFileApplicationContextInitializer.class)
@FixMethodOrder(value = MethodSorters.NAME_ASCENDING)
public class TestProcessService {

    static int userId;

    static int processId;

    @Autowired
    ProcessService processService;

     @Autowired
     UserService userService;

    static UserService us;


@PostConstruct
public void construct() throws RoleNotExistException, UserAlreadyExistException {

   // userId = userService.addUserWithRole("user", "password", "mail@mail.com", "ROLE_USER");
}

    @BeforeClass
    public static void init() throws RoleNotExistException, UserAlreadyExistException {


    }

    @AfterClass
    public static void tearDown() throws EntityNotExistsException {
       // us.removeUsers(userId);
    }


   @Test
    public void test001ScheduleEntity() throws UserNotExistsException, RoleNotExistException, UserAlreadyExistException, BadProcessTypeException {
        Integer res = processService.schedule("XVT","user");
        Assert.isInstanceOf(Integer.class, res);
        processId = res;
    }

    @Test
    public void test002RunScheduled() throws EntityNotExistsException, InterruptedException {
        processService.runScheduled(processId);
        List<ProcessEntity> pendings =  processService.getPendings();
        Assert.isTrue(pendings.size() > 0);
//        processService.runScheduled(10);
//        processService.runScheduled(11);

    }

    //@Test
    public void test003GetPendings(){

    }

}
