package ubpartner.logmanagement;

import ubpartner.logmanagement.swing.ReturnCodeReminder;

/**
 * Class to initialize log management, entrance of jar.
 */
public final class LogManagementI {

    /**
     * Class cannot be Instantiated.
     */
    private LogManagementI() {
        // Class cannot be Instantiated.
    }

    /**
     * Initialize log managment.
     * @param logfileActivationstr
     *               Activate generating log file.
     * @param printActivationstr
     *               Activate printing logs.
     * @param level
     *           log level for generating log file.
     * @param printLevel
     *           log level for 
     * @param mode
     *           mode for generating log file.
     * @param printMode
     *           mode for printing logs.
     * @param toolname
     *           tool name for generating log file.
     * @param outpath
     *           generated log file output path.
     * @param ispopup
     *           generating a prompting or not.
     */
    public static void lmInit(final String logfileActivationstr, final String printActivationstr,
    		final String level, final String printLevel,
            final String mode, final String printMode,
            final String toolname, final String outpath, final String ispopup) {
    	boolean logfileActivation = false;
    	boolean printActivation = false;
    	if (logfileActivationstr.equals("y")) {
    		logfileActivation = true;
    	} else if (logfileActivationstr.equals("n")) {
    		logfileActivation = false;
    	}
    	if (printActivationstr.equals("y")) {
    		printActivation = true;
    	} else if (printActivationstr.equals("n")) {
    		printActivation = false;
    	}
    	if (!logfileActivation && !printActivation) {
    		System.out.println("Neither generated log file activated or printing log messages activated.\n"
    				 + "No log will be generated by Log Management.");
    	} else {   		
    		LogManagement.returnCodeInit();
        	LMConfiguration.setLogfileActivation(logfileActivation);
        	LMConfiguration.setPrintActivation(printActivation);
        	if (!LogManagement.verifyParameters(logfileActivation, printActivation, level,
        			printLevel, mode, printMode, toolname, outpath, ispopup)) {
        		System.out.println("Log Management is stopped because of wrong parameter. Please verify it.");
        		return;
        	}
        	if (logfileActivation) {
                LMConfiguration.setLevel(level);
                LMConfiguration.setOutpath(outpath);
        	}
        	if (printActivation) {
                LMConfiguration.setPrintLevel(printLevel);
        	}
            LMConfiguration.geneLogConfig();

         
            LogManagement.setLogger();
            if (logfileActivation) {
                LogManagement.setMode(mode);
                LogManagement.setToolname(toolname);
            }
            if (printActivation) {
                LogManagement.setPrintMode(printMode);
            }
            LogManagement.setPopupstr(ispopup);
    	}
    }

    /**
     * Output log files and reset configuration file.
     */
    public static void lmOutputResetConfig() {
    	if (LMConfiguration.getLogfileActivation() || LMConfiguration.getPrintActivation()) {
        	if (LMConfiguration.getLogfileActivation()) {
        		new LMOutputLog();
        		LogManagement.shutdownLoggers();
                LMOutputLog.outputlog();
        	}
            LMConfiguration.deleLogConfig();
            new ReturnCodeReminder(LogManagement.getPopupstr());
    	}
    }
    /**
     * Clear content of the current log file.
     */
    public static void resetLog() {
    	LMOutputLog.purgeLog();
    }
}
